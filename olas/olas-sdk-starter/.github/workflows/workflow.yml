name: main_workflow

on:
  push:
    branches:
      - develop
      - main
  pull_request:

env:
  TENDERMINT_IMAGE_VERSION: latest

jobs:
  lock_check:
    continue-on-error: False
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-12, windows-latest ]
        python-version: ["3.10.9"]

    timeout-minutes: 18

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - if: matrix.os != 'windows-latest'
      name: Pipenv install requirements and check it can be locked
      run: |
        pip install pipenv==2023.7.23
        pipenv --clear
        time pipenv install --verbose --dev --skip-lock
        time pipenv run pip install -e .[all]
        time pipenv lock
    - if: matrix.os == 'windows-latest'
      name: Pipenv install requirements and check it can be locked
      run: |
        choco install ptime
        pip install pipenv==2023.7.23
        pipenv --clear
        ptime pipenv install --verbose --dev --skip-lock
        ptime pipenv run pip install -e .[all]
        ptime pipenv lock

  copyright_doc_and_dependencies_check:
    continue-on-error: False
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10.9"]

    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run:  |
        sudo apt-get update --fix-missing
        sudo apt-get autoremove
        sudo apt-get autoclean
        pip install tomte[tox,cli]==0.2.17
        pip install --user --upgrade setuptools
    - name: Check copyright headers
      run: tomte format-copyright --author valory --author fetchai
    - name: License compatibility check
      run: tox -e liccheck
    # - name: Check docs
    #   run: tox -e check-api-docs
    # - name: Check doc links
    #   run: tomte check-doc-links --http-skips http://host.docker.internal:8545 --http-skips http://www.fipa.org/repository/ips.php3 --url-skips "https://gateway.autonolas.tech/ipfs/<hash>," --url-skips "https://github.com/valory-xyz/open-autonomy/trunk/infrastructure" --url-skips "http://host.docker.internal:8545" --url-skips "https://github.com/valory-xyz/open-operator"
    # TODO: Investigate and fix - Package open-aea-ledger-cosmos has version ==1.38.0 in Pipfile and  in packages.
    # - name: Check dependencies
    #   run: tox -e check-dependencies

  linter_checks:
    continue-on-error: False
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10.9"]

    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@master
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/setup-go@v3
      with:
        go-version: "1.17.7"
    - name: Install dependencies
      run:  |
        sudo apt-get update --fix-missing
        sudo apt-get autoremove
        sudo apt-get autoclean
        pip install tomte[tox]==0.2.17
        pip install --user --upgrade setuptools
        # install Protobuf compiler
        wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
        unzip protoc-3.19.4-linux-x86_64.zip -d protoc
        sudo mv protoc/bin/protoc /usr/local/bin/protoc
        # install IPFS
        sudo apt-get install -y wget
        sudo npm install -g markdown-spellcheck
        wget -O ./go-ipfs.tar.gz https://dist.ipfs.io/go-ipfs/v0.6.0/go-ipfs_v0.6.0_linux-amd64.tar.gz
        tar xvfz go-ipfs.tar.gz
        sudo mv go-ipfs/ipfs /usr/local/bin/ipfs
        ipfs init
        make protolint_install
    - name: Security checks
      run: |
        tox -e bandit
        tox -e safety
    - name: Check packages
      run: tox -e check-packages    
    - name: Code style check
      run: |
        tox -e black-check
        tox -e isort-check
        tox -e flake8
        tox -e vulture
        tox -e darglint
    - name: Static type check
      run: tox -e mypy
    - name: Pylint
      run: tox -e pylint
    - name: Check spelling
      run: tox -e spell-check
    - name: AbciApp consistency checks
      run: |
        tox -e check-abci-docstrings
        tox -e check-abciapp-specs
        tox -e check-handlers
        tox -e check-dialogues
        tox -e analyse-services

  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v3
        with:
          go-version: "1.17.7"
      - run: |
          wget https://github.com/zricethezav/gitleaks/releases/download/v8.10.1/gitleaks_8.10.1_linux_x64.tar.gz && \
          tar -xzf gitleaks_8.10.1_linux_x64.tar.gz && \
          sudo install gitleaks /usr/bin && \
          gitleaks detect --report-format json --report-path leak_report -v